// --------------------------------------------------------------------------------------------------------------------
///
/// \file LibDiagCom.h
///
/// \brief Interface for the Diagnostic / UDS Layer
///
///
///
/// Copyright (c) 2021 Neusoft.
/// All Rights Reserved.
///
// --------------------------------------------------------------------------------------------------------------------

 

#ifndef LIBDIAGCOM_H__INCLUDED
#define LIBDIAGCOM_H__INCLUDED

// --------------------------------------------------------------------------------------------------------------------
//	Includes
// --------------------------------------------------------------------------------------------------------------------

#include "LibTypes.h"
#include "LibUdsIFace.h"

// --------------------------------------------------------------------------------------------------------------------
//	Global Definitions
// --------------------------------------------------------------------------------------------------------------------


// --------------------------------------------------------------------------------------------------------------------
//	Global Data Types
// --------------------------------------------------------------------------------------------------------------------

// Forward Declaration
struct S_LibDiagCom_Msg_t;

// --------------------------------------------------------------------------------------------------------------------
/// \brief 
// --------------------------------------------------------------------------------------------------------------------
typedef void (*LibDiagCom_MsgSendClbk)(struct S_LibDiagCom_Msg_t* pMsg);

// --------------------------------------------------------------------------------------------------------------------
/// \brief 
// --------------------------------------------------------------------------------------------------------------------
typedef struct S_LibDiagCom_Msg_t {
	// ----------------------------------------------------------------------------------------------------------------
	/// \brief 
	// ----------------------------------------------------------------------------------------------------------------
	E_LibDrv_DevId_t 		DevId;

	// ----------------------------------------------------------------------------------------------------------------
	/// \brief 
	// ----------------------------------------------------------------------------------------------------------------
	uint32_t 				SrcAddr;

	// ----------------------------------------------------------------------------------------------------------------
	/// \brief 
	// ----------------------------------------------------------------------------------------------------------------
	uint32_t 				TgtAddr;

	// ----------------------------------------------------------------------------------------------------------------
	/// \brief 
	// ----------------------------------------------------------------------------------------------------------------
	uint8_t* 				pPayload;

	// ----------------------------------------------------------------------------------------------------------------
	/// \brief 
	// ----------------------------------------------------------------------------------------------------------------
	uint16_t 				PayloadLen;

	// ----------------------------------------------------------------------------------------------------------------
	/// \brief 
	// ----------------------------------------------------------------------------------------------------------------
	uint16_t				MaxPayloadLen;

	// ----------------------------------------------------------------------------------------------------------------
	/// \brief 
	// ----------------------------------------------------------------------------------------------------------------
	bool_t 					IsPhysical;

	// ----------------------------------------------------------------------------------------------------------------
	/// \brief 
	// ----------------------------------------------------------------------------------------------------------------
	LibDiagCom_MsgSendClbk 	SendMessage;
} S_LibDiagCom_Msg_t;

// --------------------------------------------------------------------------------------------------------------------
/// \brief Error values which are issued by the lower layer (Transport Protocol)
// --------------------------------------------------------------------------------------------------------------------
typedef enum {
	LIBDIAGCOM_ERROR_TRANSMISSION_TIMEOUT		= UINT32_C(0x00000001),
	LIBDIAGCOM_ERROR_FLOWCONTROL_TIMEOUT		= UINT32_C(0x00000002),
	LIBDIAGCOM_ERROR_CONSECUTIVEFRAME_TIMEOUT	= UINT32_C(0x00000004),
	LIBDIAGCOM_ERROR_WRONG_SEQUENCE_NUMBER		= UINT32_C(0x00000008),
	LIBDIAGCOM_ERROR_BUFFER_OVERFLOW			= UINT32_C(0x00000010),
	LIBDIAGCOM_ERROR_INVALIDE_FC			    = UINT32_C(0x00000011),
	LIBDIAGCOM_ERROR_INVALIDE_CF			    = UINT32_C(0x00000012),
} E_LibDiagCom_Error_t;

// --------------------------------------------------------------------------------------------------------------------
//	Imported Variables
// --------------------------------------------------------------------------------------------------------------------


// --------------------------------------------------------------------------------------------------------------------
//	Global Function Prototypes
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
/// \brief Retrieve the status of DiagCom.
///
/// \return true if DiagCom is ready to manage new message, false if the is some asynchronous request in progress.
// --------------------------------------------------------------------------------------------------------------------
bool_t LibDiagCom_IsReady(void);

// --------------------------------------------------------------------------------------------------------------------
/// \brief Message Received Handler
///
/// This function is called by the CAN TP layer.
/// 
/// \param pMsg 
// --------------------------------------------------------------------------------------------------------------------
extern void LibDiagCom_MsgReceived(S_LibDiagCom_Msg_t* pMsg);

// --------------------------------------------------------------------------------------------------------------------
/// \brief Start Of Message handler.
///
/// This function is called by the CAN TP layer. An indication that the start of a multi-frame message. 
/// (Session Layer.SOM)
// --------------------------------------------------------------------------------------------------------------------
extern void LibDiagCom_StartOfMsg(void);

// --------------------------------------------------------------------------------------------------------------------
/// \brief Message send confirmation handler
/// 
/// This function is called by the CAN TP layer. An indication that a message-send-request is sent successfully.
// --------------------------------------------------------------------------------------------------------------------
extern void LibDiagCom_MsgConfirm(void);

// --------------------------------------------------------------------------------------------------------------------
/// \brief Send a UDS message
/// 
/// \param pMsg 
// --------------------------------------------------------------------------------------------------------------------
extern void LibDiagCom_MsgSend(S_LibUds_IfaceCfg_t* pMsg);

// --------------------------------------------------------------------------------------------------------------------
/// \brief Retrieve the current DiagCom message
/// 
/// \return S_LibDiagCom_Msg_t* 
// --------------------------------------------------------------------------------------------------------------------
extern S_LibDiagCom_Msg_t* LibDiagCom_GetMsg(void);

// --------------------------------------------------------------------------------------------------------------------
/// \brief Notify the DiagCom that a request is processed and the response is available
// --------------------------------------------------------------------------------------------------------------------
extern void LibDiagCom_RequestProcessed(void);

// --------------------------------------------------------------------------------------------------------------------
/// \brief 
/// 
/// \param error 
// --------------------------------------------------------------------------------------------------------------------
extern void LibDiagCom_Error(const E_LibDiagCom_Error_t error);

#endif // LIBDIAGCOM_H__INCLUDED

